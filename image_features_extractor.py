# -*- coding: utf-8 -*-
"""image_features_extractor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nt0HBsq1BdwOQgbw1XYjOWoHEI1DrBAV
"""

import cv2
import numpy as np
import skimage
from skimage import transform
from skimage import io
from Airlight import Airlight
from BoundCon import BoundCon
from CalTransmission import CalTransmission
import imageio
import numpy as np
import cv2
import argparse
import pandas as pd
#import matplotlib.pyplot as plt
#import os
from sklearn.decomposition import PCA
from scipy import fftpack
from skimage.transform import resize

def radial_profile(img):
    Y,X,Z =img.shape
    y,x,z = np.indices((img.shape))
    r = np.sqrt((x -X/2)**2 + (y - Y/2)**2)
    r = r.astype(np.int)

    tbin = np.bincount(r.ravel(), img.ravel())
    nr = np.bincount(r.ravel())
    radialprofile = tbin / nr
    return radialprofile

def extract_power_spectrum(img, plot=False):
    F1 = fftpack.fft2(img)
    F2 = fftpack.fftshift( F1 )
    psd2D = 20*np.log(np.abs( F2 )).astype(np.uint8)
    features=radial_profile(psd2D)
    x=features.shape
    mod=np.mod(x,10)[0]
    feature=features[:-mod].reshape(10,-1)
    feature=np.sum(feature,axis=1)
    return feature

def saturation(img):
    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    hist = cv2.calcHist([hsv],[1],None,[10],[0,256])
    features = hist
    return features

def contrast(img):
    #first we calculate luminance
    YCB = cv2.cvtColor(img, cv2.COLOR_BGR2YCrCb)
    Y=YCB[:,:,0]
    N,P=Y.shape
    C=np.sqrt(np.abs(N*P*np.sum(Y**2)-np.sum(Y)**2))/N*P
    return C

def get_dark_channel(I, w):
	"""Get the dark channel prior in the (RGB) image data.
	Parameters
	-----------
	I:  an M * N * 3 numpy array containing data ([0, L-1]) in the image where
		M is the height, N is the width, 3 represents R/G/B channels.
	w:  window size
	Return
	-----------
	An M * N array for the dark channel prior ([0, L-1]).
	"""
	M, N, _ = I.shape
	padded = np.pad(I, ((int(w / 2), int(w / 2)), (int(w / 2), int(w / 2)), (0, 0)), 'edge')
	darkch = np.zeros((M, N))
	for i, j in np.ndindex(darkch.shape):
		darkch[i, j] = np.min(padded[i:i + w, j:j + w, :])  # CVPR09, eq.5
	return darkch

def get_transmission(I, A, darkch, omega, w):
	"""Get the transmission esitmate in the (RGB) image data.
	Parameters
	-----------
	I:       the M * N * 3 RGB image data ([0, L-1]) as numpy array
	A:       a 3-element array containing atmosphere light
			([0, L-1]) for each channel
	darkch:  the dark channel prior of the image as an M * N numpy array
	omega:   bias for the estimate
	w:       window size for the estimate
	Return
	-----------
	An M * N array containing the transmission rate ([0.0, 1.0])
	"""
	return 1 - omega * get_dark_channel(I / A, w)  # CVPR09, eq.12

def get_atmosphere(I, darkch, p):
	"""Get the atmosphere light in the (RGB) image data.
	Parameters
	-----------
	I:      the M * N * 3 RGB image data ([0, L-1]) as numpy array
v	p:      percentage of pixels for estimating the atmosphere light
	Return
	-----------
	A 3-element array containing atmosphere light ([0, L-1]) for each channel
	"""
	# reference CVPR09, 4.4
	M, N = darkch.shape
	flatI = I.reshape(M * N, 3)
	flatdark = darkch.ravel()
	searchidx = (-flatdark).argsort()[:int(M * N * p)]  # find top M * N * p indexes
	# return the highest intensity for each channel
	return np.max(flatI.take(searchidx, axis=0), axis=0)

def save_output_image(output_ndarray, path_to_output_image):
	np.save(path_to_output_image, output_ndarray)
	#skimage.io.imsave(path_to_output_image, output_ndarray)

def extract_dark_channel_features(img_npy):
	darkchannel = get_dark_channel(img_npy, 15)
	feature_matrix = np.zeros((10, 10))
	for i, j in np.ndindex(feature_matrix.shape):
		feature_matrix[i, j] = np.median(darkchannel[i:(i+1)*50, j:(j+1)*50])
	return feature_matrix.ravel(), darkchannel

def extract_atmosphere_features(img_npy, darkchannel):
	A_ = get_atmosphere(img_npy, darkchannel, 0.01)
	return A_.ravel(), A_

def extract_transmission_features(img_npy, A_, darkchannel):
	transmission_matrix = get_transmission(img_npy, A_, darkchannel, 0.95, 15)
	feature_matrix = np.zeros((10, 10))
	for i, j in np.ndindex(feature_matrix.shape):
		feature_matrix[i, j] = np.median(transmission_matrix[i:(i+1)*50, j:(j+1)*50])
	return feature_matrix.ravel(), transmission_matrix

def extract_features_from_image(path_to_input_image):
    img_npy = cv2.imread(path_to_input_image)
    img_npy = skimage.transform.resize(img_npy,(500,500,3))
    img_npy = np.array(img_npy).astype(np.float64)
    dark_channel_features, darkchannel = extract_dark_channel_features(img_npy)
    atmosphere_features, A_ = extract_atmosphere_features(img_npy, darkchannel)
    transmission_features, transmission_matrix = extract_transmission_features(img_npy, A_, darkchannel)

    img = cv2.imread(path_to_input_image)
    power_spectrum=extract_power_spectrum(img)
    saturation_histogram=saturation(img)
    C=contrast(img)

    return np.concatenate((np.array(dark_channel_features.astype(np.float32)).reshape(1, -1),
                                np.array(atmosphere_features.astype(np.float32)).reshape(1, -1),
                                np.array(transmission_features.astype(np.float32)).reshape(1, -1),
                                np.array(saturation_histogram.astype(np.float32)).reshape(1, -1),
                                np.array(power_spectrum.astype(np.float32)).reshape(1, -1),
                                np.array(C.astype(np.float32)).reshape(1, -1)), axis=1)


def extract_features_from_fullimage(img):
    img_npy = skimage.transform.resize(img,(500,500,3))
    img_npy = np.array(img_npy).astype(np.float64)
    dark_channel_features, darkchannel = extract_dark_channel_features(img_npy)
    atmosphere_features, A_ = extract_atmosphere_features(img_npy, darkchannel)
    transmission_features, transmission_matrix = extract_transmission_features(img_npy, A_, darkchannel)  
    power_spectrum=extract_power_spectrum(img_npy)
    saturation_histogram=saturation(img)
    C=contrast(img)
    return np.concatenate((np.array(dark_channel_features.astype(np.float32)).reshape(1, -1),
                                np.array(atmosphere_features.astype(np.float32)).reshape(1, -1),
                                np.array(transmission_features.astype(np.float32)).reshape(1, -1),
                                np.array(saturation_histogram.astype(np.float32)).reshape(1, -1),
                                np.array(power_spectrum.astype(np.float32)).reshape(1, -1),
                                np.array(C.astype(np.float32)).reshape(1, -1)), axis=1)
